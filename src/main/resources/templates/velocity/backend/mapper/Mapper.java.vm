package ${javaRootPackage}.mapper;

import ${javaRootPackage}.config.CustomBaseMapper;
import ${javaRootPackage}.pojo.bo.mapper.bases.*;
import ${javaRootPackage}.pojo.bo.mapper.${classname}.*;
import ${javaRootPackage}.pojo.entity.${ClassName};
import org.springframework.stereotype.Component;
import java.util.List;
import org.apache.ibatis.annotations.Param;

@Component
public interface ${ClassName}Mapper extends CustomBaseMapper<${ClassName}> {

	// =====================================查询业务 start=====================================

	${ClassName} selectById(IdMapperBO mapperBO);

#foreach ($column in $likeParamColumns)
	List<${ClassName}> selectBy${column.upperAttrName}WhereLike(${ClassName}${column.upperAttrName}LikeQueryMapperBO mapperBO);

#end

#foreach ($column in $foreignKeyColumns)
	${ClassName} selectOneBy${column.upperAttrName}(${ClassName}${column.upperAttrName}MapperBO mapperBO);

	List<${ClassName}> selectBy${column.upperAttrName}(${ClassName}${column.upperAttrName}MapperBO mapperBO);

	List<${ClassName}> selectBy${column.upperAttrName}List(${ClassName}${column.upperAttrName}ListMapperBO mapperBO);

#end

#foreach ($column in $oneQueryParamColumns)
	List<${ClassName}> selectBy${column.upperAttrName}(${ClassName}${column.upperAttrName}MapperBO mapperBO);

#end

#foreach ($column in $listQueryParamColumns)
	List<${ClassName}> selectBy${column.upperAttrName}List(${ClassName}${column.upperAttrName}ListMapperBO mapperBO);

#end

#if($isIncludeParentId)
	List<${ClassName}> selectByParentId(ParentIdMapperBO mapperBO);

	List<${ClassName}> selectByParentIdList(ParentIdListMapperBO mapperBO);

#end

	List<${ClassName}> selectByIdList(IdListMapperBO mapperBO);

	List<${ClassName}> selectByPageQueryMapperBo(${ClassName}PageQueryMapperBO mapperBO);

	Integer selectCountByPageQueryMapperBo(${ClassName}PageQueryMapperBO mapperBO);

#if($isIncludeStateEnum)
	List<${ClassName}> selectByStateEnum(BaseQueryMapperBO mapperBO);
#end

#if($isIncludeDeleteEnum)
	List<${ClassName}> selectByDeleteEnum(BaseQueryMapperBO mapperBO);
#end

#if($isIncludeStateEnum && $isIncludeDeleteEnum)
	List<${ClassName}> selectByDeleteEnumAndStateEnum(BaseQueryMapperBO mapperBO);
#end

	// =====================================查询业务 end=====================================
	// =====================================操作业务 start=====================================

	int batchInsertList(@Param("list") List<${ClassName}> list);

#if($isIncludeStateEnum)
	int updateStateEnumByIdList(BatchUpdateStateMapperBO mapperBO);
#end

#if($isIncludeDeleteEnum)
	int updateDeleteEnumByIdList(BatchDeleteMapperBO mapperBO);

#foreach ($column in $foreignKeyColumns)
	int updateDeleteEnumBy${column.upperAttrName}List(${ClassName}${column.upperAttrName}ListToDeleteMapperBO mapperBO);

#end
#else
	int deleteByIdList(BatchDeleteMapperBO mapperBO);

#if($isRelationTable)
	int deleteBy${foreignKeyFirstColumn.upperAttrName}And${foreignKeySecondColumn.upperAttrName}(${ClassName}${foreignKeyFirstColumn.upperAttrName}And${foreignKeySecondColumn.upperAttrName}ToDeleteMapperBO mapperBO);
#end

#foreach ($column in $foreignKeyColumns)
	int deleteBy${column.upperAttrName}List(${ClassName}${column.upperAttrName}ListToDeleteMapperBO mapperBO);

#end
#end

#if($isIncludeRanking)
	void batchUpdateRanking(@Param("list") List<BatchUpdateRankingMapperBO> list);
#end
	// =====================================操作业务 end=====================================

}
